{"version":3,"sources":["firebase.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Todo","props","classes","useState","open","setOpen","input","setInput","Modal","onClose","e","className","placeholder","todo","value","onChange","event","target","Button","onClick","collection","doc","id","set","merge","List","ListItem","ListItemAvatar","ListItemText","primary","secondary","delete","App","todos","setTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","Input","disabled","type","preventDefault","add","timestamp","FieldValue","serverTimestamp","variant","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9eed92f2.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n    apiKey: \"AIzaSyCSmO31PeojDPRoIACK2BhK2KMy-HyTlfc\",\n    authDomain: \"todo-app-12f49.firebaseapp.com\",\n    databaseURL: \"https://todo-app-12f49.firebaseio.com\",\n    projectId: \"todo-app-12f49\",\n    storageBucket: \"todo-app-12f49.appspot.com\",\n    messagingSenderId: \"545158350719\",\n    appId: \"1:545158350719:web:325c5416b554dd0e9abc4a\",\n    measurementId: \"G-5RSYT787XB\"\n});\n\nconst db = firebaseApp.firestore();\n\nexport default db;","import React, { useState } from 'react';\nimport './Todo.css';\nimport { List, ListItem, ListItemText, ListItemAvatar, Avatar, Button, Modal } from '@material-ui/core'\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport db from './firebase';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        position: 'absolute',\n        width: 400,\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nfunction Todo(props) {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const [input, setInput] = useState('');\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const updateTodo = () => {\n        // update the todo with the new input text\n        db.collection('todos').doc(props.todo.id).set({\n            todo: input\n        }, { merge: true });\n\n        setOpen(false);\n    }\n\n    return (\n        <>\n        <Modal\n        open={open}\n        onClose={e => setOpen(false)}\n        >\n        <div className={classes.paper}>\n            <h1></h1>\n            <input placeholder={props.todo.todo} value={input} onChange={event => setInput(event.target.value)} />\n            <Button onClick={updateTodo}>Update</Button>\n        </div>\n        </Modal>\n        <List className=\"todo__list\">\n            <ListItem>\n                <ListItemAvatar>\n                </ListItemAvatar>\n                <ListItemText primary={props.todo.todo} secondary=\"Dummy Deadline ⏰\" />\n            </ListItem>\n            <button onClick={e => setOpen(true)}>Edit</button>\n            <DeleteForeverIcon onClick={event => db.collection('todos').doc(props.todo.id).delete()} />\n        </List>\n        </>\n    )\n}\n\nexport default Todo\n","import React, { useState, useEffect } from 'react';\nimport Todo from './Todo'\nimport { Button, FormControl, Input, InputLabel } from '@material-ui/core'\nimport './App.css';\nimport db from './firebase';\nimport firebase from 'firebase';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState('');\n\n  // When the app loads, we need to listen to the database and fetch new todos as they get added/removed\n  useEffect(() => {\n    // this code here... fires when the app.js loads\n    db.collection('todos').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => ({id: doc.id, todo: doc.data().todo})))\n    })\n  }, []);\n\n  const addTodo = (event) => {\n    // this will fire off when we click the button\n    event.preventDefault(); // will stop the REFRESH\n\n    db.collection('todos').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    setInput(''); // clear up the input after clicking add todo button\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"heading-title\">Hello World 🚀 <br/>This is the To-Do App 👌<br /><br/>By: Rami Waked 🇵🇦</h1>\n      <form>\n        <FormControl>\n          <InputLabel>✅&nbsp;&nbsp;&nbsp;Write a Todo</InputLabel>\n          <Input value={input} onChange={event => setInput(event.target.value)} />\n        </FormControl>\n\n        <Button disabled={!input} type=\"submit\" onClick={addTodo} variant=\"contained\" color=\"primary\">Add To Do</Button>\n      </form>\n\n      <ul>\n        {todos.map(todo => (\n          <Todo todo={todo} />\n          // <li>{todo}</li>\n        ))}\n      </ul>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}